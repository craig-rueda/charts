apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ template "distributor.fullname" . }}
  labels:
    app: {{ template "distributor.name" . }}
    chart: {{ template "distribution.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    component: {{ .Values.distributor.name }}
spec:
  serviceName: {{ template "distributor.name" . }}
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ template "distributor.name" . }}
      chart: {{ template "distribution.chart" . }}
      release: {{ .Release.Name }}
      role: {{ template "distributor.name" . }}
      component: {{ .Values.distributor.name }}
  template:
    metadata:
      labels:
        app: {{ template "distributor.name" . }}
        chart: {{ template "distribution.chart" . }}
        release: {{ .Release.Name }}
        role: {{ template "distributor.name" . }}
        component: {{ .Values.distributor.name }}
    spec:
      serviceAccountName: {{ template "distribution.serviceAccountName" . }}
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
    {{- end }}
      securityContext:
        runAsUser: {{ .Values.distribution.uid }}
        fsGroup: {{ .Values.distribution.uid }}
      initContainers:
      - name: 'prepare-data'
        image: '{{ .Values.initContainerImage }}'
        imagePullPolicy: {{ .Values.distributor.image.pullPolicy }}
        command:
        - '/bin/sh'
        - '-c'
        - >
          {{- if .Values.distributor.token }}
          echo Setting up distributor token;
          mkdir -pv {{ .Values.distributor.persistence.mountPath }}/etc/security;
          cp -fv /tmp/security/token {{ .Values.distributor.persistence.mountPath }}/etc/security/token;
          chmod 400 {{ .Values.distributor.persistence.mountPath }}/etc/security/token;
          {{- end }}
        volumeMounts:
        - name: distributor-data
          mountPath: {{ .Values.distributor.persistence.mountPath | quote }}
        {{- if .Values.distributor.token }}
        - name: distributor-token
          mountPath: '/tmp/security'
        {{- end }}
      containers:
      - name: {{ .Values.distributor.name }}
        image: '{{ .Values.distributor.image.repository }}:{{ default .Chart.AppVersion .Values.distributor.image.version }}'
        imagePullPolicy: {{ .Values.distributor.image.imagePullPolicy }}
        command:
          - '/bin/sh'
          - '-c'
          - >
            echo =========================================================;
            echo HOSTNAME is ${HOSTNAME};
            ORDINAL=$(echo ${HOSTNAME} | sed 's/.*-\(.*\)/\1/g');
            echo ORDINAL is ${ORDINAL};
            export REDIS_HOST={{ template "distribution.fullname" . }}-redis-${ORDINAL}.{{ template "distribution.fullname" . }}-redis;
            echo REDIS_HOST is ${REDIS_HOST};
            export DISTRIBUTION_HOST={{ template "distribution.fullname" . }}-${ORDINAL}.{{ template "distribution.fullname" . }}-headless;
            echo DISTRIBUTION_HOST is ${DISTRIBUTION_HOST};
            export DEFAULT_JAVA_OPTS="${DEFAULT_JAVA_OPTS} -Djfrog.distributor.distribution.internal-api-url=http://${DISTRIBUTION_HOST}:{{ .Values.distribution.internalPort }}/api/internal";
            echo DEFAULT_JAVA_OPTS is ${DEFAULT_JAVA_OPTS};
            echo Waiting for Redis availability...;
            until nc -z -w 2 ${REDIS_HOST} {{ .Values.redis.port }} && echo "Redis ${REDIS_HOST} is ready!"; do sleep 3; echo "Waiting..."; done;
            echo =========================================================;
            cd /opt/jfrog/distribution-distributor;
            ./wrapper.sh
        securityContext:
          allowPrivilegeEscalation: false
        env:
        - name: DEFAULT_JAVA_OPTS
          value: '-Ddistribution.home={{ .Values.distributor.persistence.mountPath }}
                  -Dfile.encoding=UTF8 -Dcom.sun.management.jmxremote.authenticate=false
                  -Dcom.sun.management.jmxremote.ssl=false -Duser.timezone=UTC
                  {{- if .Values.distributor.javaOpts.xms }}
                  -Xms{{ .Values.distributor.javaOpts.xms }}
                  {{- end}}
                  {{- if .Values.distributor.javaOpts.xmx }}
                  -Xmx{{ .Values.distributor.javaOpts.xmx }}
                  {{- end}}
                  -Dspring.profiles.active=production'
        - name: REDIS_PORT
          value: '{{ .Values.redis.port }}'
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "distribution.fullname" . }}-redis-connection
              key: password
        volumeMounts:
        - name: distributor-data
          mountPath: {{ .Values.distributor.persistence.mountPath | quote }}
        resources:
{{ toYaml .Values.distributor.resources | indent 10 }}
      volumes:
      {{- if .Values.distributor.token }}
      - name: distributor-token
        secret:
          secretName: {{ template "distributor.fullname" . }}-token
      {{- end }}
      {{- if .Values.distributor.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: distributor-data
      spec:
      {{- if .Values.distributor.persistence.existingClaim }}
        selector:
          matchLabels:
            app: {{ template "distributor.name" . }}
      {{- else }}
        {{- if .Values.distributor.persistence.storageClass }}
        {{- if (eq "-" .Values.distributor.persistence.storageClass) }}
        storageClassName: ''
        {{- else }}
        storageClassName: '{{ .Values.distributor.persistence.storageClass }}'
        {{- end }}
        {{- end }}
        accessModes: [ '{{ .Values.distributor.persistence.accessMode }}' ]
        resources:
          requests:
            storage: {{ .Values.distributor.persistence.size }}
      {{- end }}
      {{- else }}
      - name: distributor-data
        emptyDir: {}
      {{- end }}
